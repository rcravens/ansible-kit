---
- name: "Get a list of VPC peers for this VPC."
  ec2_vpc_peering_info:
    region: "{{ aws_region }}"
    filters:
      requester-vpc-info.vpc-id: "{{ my_vpc.vpcs[0].vpc_id }}"
  register: vpc_peers

- name: "Delete peering connections for this VPC."
  ec2_vpc_peer:
    region: "{{ aws_region }}"
    peering_id: "{{ item.vpc_peering_connection_id }}"
    state: "absent"
  with_items: "{{ vpc_peers.result }}"

- name: "Get a list of route tables for this VPC."
  amazon.aws.ec2_vpc_route_table_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ my_vpc.vpcs[0].vpc_id }}"
      association.main: "false"
  register: route_table_info

- debug: var=route_table_info

- set_fact:
    route_tables_to_delete: "{{ (route_tables_to_delete | default([])) + [item.id] }}"
  when: item.associations | length == 0 or not item.associations[0].main
  loop: "{{ route_table_info.route_tables }}"

- debug: var=route_tables_to_delete
#- pause: seconds=30

- name: "Purge routes and delete the route tables."
  amazon.aws.ec2_vpc_route_table:
    region: "{{ aws_region }}"
    vpc_id: "{{ my_vpc.vpcs[0].vpc_id }}"
    route_table_id: "{{ item }}"
    lookup: "id"
    purge_routes: "yes"
    purge_subnets: "yes"
    state: "absent"
  loop: "{{ route_tables_to_delete }}"
  when: route_tables_to_delete is defined

#- pause: seconds=30

- name: "Delete internet gateways associated with this VPC."
  ec2_vpc_igw:
    region: "{{ aws_region }}"
    vpc_id: "{{ item.vpc_id }}"
    state: "absent"
  with_items: "{{ my_vpc.vpcs }}"

- name: "Get a list of existing subnets for this VPC."
  ec2_vpc_subnet_info:
    region: "{{ aws_region }}"
    filters:
      vpc-id: "{{ my_vpc.vpcs[0].vpc_id }}"
  register: subnet_info

- debug: var=subnet_info

- name: "Deleting subnets belonging to this VPC."
  ec2_vpc_subnet:
    region: "{{ aws_region }}"
    vpc_id: "{{ my_vpc.vpcs[0].vpc_id }}"
    cidr: "{{ item.cidr_block }}"
    state: "absent"
  with_items: "{{ subnet_info.subnets }}"

- name: "Finally, deleting the VPC."
  ec2_vpc_net:
    region: "{{ aws_region }}"
    name: "{{ aws_vpc_name }}"
    cidr_block: "{{ my_vpc.vpcs[0].cidr_block }}"
    state: "absent"